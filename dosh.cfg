/**
 * Copyright (C) 2013 Guangzhou Tronlong Electronic Technology Co., Ltd. - www.tronlong.com
 *
 * @file ndk_benchmark_c667x.cfg
 *
 * @brief BIOS configuration file.
 *
 * @author Tronlong <support@tronlong.com>
 *
 * @version V1.0
 *
 * @date 2020-08-09
 *
 **/

/* ================ RTSC Moudles ================ */
var Memory  =   xdc.useModule('xdc.runtime.Memory');
var BIOS    =   xdc.useModule('ti.sysbios.BIOS');
var Task    =   xdc.useModule('ti.sysbios.knl.Task');
var HeapBuf =   xdc.useModule('ti.sysbios.heaps.HeapBuf');
var Log     =   xdc.useModule('xdc.runtime.Log');
var Clock   =   xdc.useModule ('ti.sysbios.knl.Clock');
var Sem	    =   xdc.useModule ('ti.sysbios.knl.Semaphore');
var Hwi	    =   xdc.useModule ('ti.sysbios.hal.Hwi');
var Ecm     =   xdc.useModule ('ti.sysbios.family.c64p.EventCombiner');
var Diags   =   xdc.useModule('xdc.runtime.Diags');
var CpIntc = xdc.useModule('ti.sysbios.family.c66.tci66xx.CpIntc');
var ti_sysbios_family_c64p_Hwi = xdc.useModule('ti.sysbios.family.c64p.Hwi');
var Cache = xdc.useModule('ti.sysbios.family.c66.Cache');
var Load = xdc.useModule('ti.sysbios.utils.Load');
var Seconds = xdc.useModule('ti.sysbios.hal.Seconds');


Program.stack = 0x4000;

/*
** Allow storing of task names. By default if you name a task with a friendly display name it will not be saved
** to conserve RAM. This must be set to true to allow it. We use friendly names on the Task List display.
*/
Task.common$.namedInstance = true;
/* Load the CSL package */
var Csl = xdc.useModule('ti.csl.Settings');
Csl.deviceType = "c6678";
/* Load the CPPI package */
var Cppi = xdc.loadPackage('ti.drv.cppi');

/* Load the QMSS package */
var Qmss = xdc.loadPackage('ti.drv.qmss');

/* Load the PA package */
var Pa = xdc.useModule('ti.drv.pa.Settings');

/*
** Sets up the exception log so you can read it with ROV in CCS
*/
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Exc = xdc.useModule('ti.sysbios.family.c64p.Exception');
Exc.common$.logger = LoggerBuf.create();
Exc.enablePrint = true; /* prints exception details to the CCS console */

/*
** Use this load to configure NDK 2.2 and above using RTSC. In previous versions of
** the NDK RTSC configuration was not supported and you should comment this out.
*/
var Global      =   xdc.useModule('ti.ndk.config.Global');

/*
** This allows the heart beat (poll function) to be created but does not generate the stack threads
**
** Look in the cdoc (help files) to see what CfgAddEntry items can be configured. We tell it NOT
** to create any stack threads (services) as we configure those ourselves in our Main Task
** thread hpdspuaStart.
*/
Global.enableCodeGeneration = false;
Global.memRawPageSize = 2100;
var Startup     =   xdc.useModule('xdc.runtime.Startup');
var System      =   xdc.useModule('xdc.runtime.System');

/*
** Create a Heap.
*/
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams = new HeapMem.Params();
heapMemParams.size = 0x300000;
heapMemParams.sectionName = "systemHeap";
Program.global.heap0 = HeapMem.create(heapMemParams);
Memory.defaultHeapInstance  =   Program.global.heap0;

/* Required if using System_printf to output on the console */
SysStd          		=   xdc.useModule('xdc.runtime.SysStd');
System.SupportProxy     =   SysStd;

/*
** If you are using RTSC configuration with NDK 2.2 and above, this is done by default, else
** register hooks so that the stack can track all Task creation
Task.common$.namedInstance  =   true;
Task.addHookSet ({ registerFxn: '&NDK_hookInit', createFxn: '&NDK_hookCreate', });

/* Enable BIOS Task Scheduler */
BIOS.taskEnabled			=   true;

/*
 * Enable Event Groups here and registering of ISR for specific GEM INTC is done
 * using EventCombiner_dispatchPlug() and Hwi_eventMap() APIs
 */
Ecm.eventGroupHwiNum[0] = 7;
Ecm.eventGroupHwiNum[1] = 8;
Ecm.eventGroupHwiNum[2] = 9;
Ecm.eventGroupHwiNum[3] = 10;


/* This is the default memory heap. */
Program.sectMap["systemHeap"] = "DDR3";
Program.sectMap[".cio"]     = "DDR3";
Program.sectMap[".far"] 	= 	"DDR3";
Program.sectMap[".rodata"] 	= 	"DDR3";
Program.sectMap[".neardata"]= 	"DDR3";
Program.sectMap[".cppi"] 	= 	"DDR3";
Program.sectMap[".qmss"] 	= 	"DDR3";
Program.sectMap[".cinit"] 	= 	"DDR3";
Program.sectMap[".bss"]		=	"DDR3";
Program.sectMap[".const"]	=	"DDR3";
Program.sectMap[".text"]	=	"DDR3";
Program.sectMap[".code"]	=	"DDR3";
Program.sectMap[".switch"]	=	"DDR3";
Program.sectMap[".fardata"] = 	"DDR3";
Program.sectMap[".vecs"] 	= 	"DDR3";
Program.sectMap[".far:taskStackSection"] = "DDR3";
Program.sectMap[".stack"]	=	"DDR3";
Program.sectMap[".nimu_eth_ll2"] = "DDR3";
Program.sectMap[".resmgr_memregion"] = {loadSegment: "DDR3", loadAlign:128};	/* QMSS descriptors region 	*/
Program.sectMap[".resmgr_handles"] = {loadSegment: "DDR3", loadAlign:16};	/* CPPI/QMSS/PA Handles			*/
Program.sectMap[".resmgr_pa"]	= {loadSegment: "DDR3", loadAlign:8};		/* PA Memory					*/
Program.sectMap[".far:NDK_OBJMEM"] = {loadSegment: "DDR3", loadAlign: 8};
Program.sectMap[".far:NDK_PACKETMEM"] = {loadSegment: "DDR3", loadAlign: 128};
